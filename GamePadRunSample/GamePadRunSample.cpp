/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
///
/// GamePad制御サンプル
/// 
/// Main: GamePadRunSample.cpp
/// 
/// static std::atomic<DIJOYSTATE2>* GamePadOBJtOutMode = new std::atomic<DIJOYSTATE2>();
/// 結果が入ってくる
/// 
/// 
///	
///   履歴	
///   2024/10/15 V1.00 First
///
///
///                        Copyright(c) 2024, Retar.jp, All Rights Reserved.
///                        http://www.retar.jp/
/// 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "GamePad.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//#pragma comment(lib, "XInput.lib")			//古いPS2ゲームコントローラーらしい
#pragma comment(lib, "dinput8.lib")
#pragma comment(lib, "dxguid.lib")
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//GamePad使用可能状態 TRUE->使用可能 FALSE->使用不可能
static std::atomic<bool>* GamePadOBJeFlag = new std::atomic<bool>();
//GamePad更新時間
static int GamePadOBJrenewTime = 5;
//GamePadリターン
static std::atomic<DIJOYSTATE2>* GamePadOBJtOutMode = new std::atomic<DIJOYSTATE2>();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//GamePad INIT -> TRUEにする
	*GamePadOBJeFlag = TRUE;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//GamePad Setting
	GanePadOBJ GamePadOBJWrapperInstance(
		GamePadOBJeFlag
		, GamePadOBJrenewTime
		, GamePadOBJtOutMode
	);
	// std::threadコンストラクタに引数を渡してスレッドを開始
	std::thread InputThread(&GanePadOBJ::InputThread, &GamePadOBJWrapperInstance);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::cout << "Game Pad : Start " << std::endl;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	while (*GamePadOBJeFlag)
	{
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//ゲームコントローラーのステータス
		*GamePadOBJeFlag = GamePadOBJWrapperInstance.getGamePadStats();
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//終了
		if (GetAsyncKeyState(VK_ESCAPE) & 0x8000)
		{
			*GamePadOBJeFlag = FALSE;
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//// X秒間プログラムを停止 =>スレッドで入れないと電気食いになります
		std::chrono::milliseconds sleepDuration(GamePadOBJrenewTime);
		std::this_thread::sleep_for(sleepDuration);
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//スレッドをjoinしてから終了させないとエラーになる -> 自動開放されない
	if (InputThread.joinable())
	{
		InputThread.join();
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::cout << "Game Pad : End " << std::endl;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//スレッドの終了を一定程度待つ
	std::chrono::milliseconds sleepDuration(4000);
	std::this_thread::sleep_for(sleepDuration);
	GamePadOBJWrapperInstance.deinitGamePad();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
